// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "euclidean_dist.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic euclidean_dist::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic euclidean_dist::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<28> euclidean_dist::ap_ST_fsm_state1 = "1";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state2 = "10";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state3 = "100";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state4 = "1000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state5 = "10000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state6 = "100000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state7 = "1000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state8 = "10000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state9 = "100000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state10 = "1000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state11 = "10000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state12 = "100000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<28> euclidean_dist::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<32> euclidean_dist::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> euclidean_dist::ap_const_lv32_1 = "1";
const sc_lv<32> euclidean_dist::ap_const_lv32_2 = "10";
const sc_lv<32> euclidean_dist::ap_const_lv32_7 = "111";
const sc_lv<32> euclidean_dist::ap_const_lv32_B = "1011";
const sc_lv<32> euclidean_dist::ap_const_lv32_10 = "10000";
const sc_lv<11> euclidean_dist::ap_const_lv11_0 = "00000000000";
const sc_lv<32> euclidean_dist::ap_const_lv32_3 = "11";
const sc_lv<32> euclidean_dist::ap_const_lv32_C = "1100";
const sc_lv<32> euclidean_dist::ap_const_lv32_8 = "1000";
const sc_lv<11> euclidean_dist::ap_const_lv11_400 = "10000000000";
const sc_lv<11> euclidean_dist::ap_const_lv11_1 = "1";
const sc_lv<2> euclidean_dist::ap_const_lv2_0 = "00";
const sc_lv<2> euclidean_dist::ap_const_lv2_1 = "1";
const sc_lv<32> euclidean_dist::ap_const_lv32_1B = "11011";
const sc_lv<1> euclidean_dist::ap_const_lv1_1 = "1";
const bool euclidean_dist::ap_const_boolean_1 = true;

euclidean_dist::euclidean_dist(sc_module_name name) : sc_module(name), mVcdFile(0) {
    euclidean_dist_fabkb_U1 = new euclidean_dist_fabkb<1,5,32,32,32>("euclidean_dist_fabkb_U1");
    euclidean_dist_fabkb_U1->clk(ap_clk);
    euclidean_dist_fabkb_U1->reset(ap_rst);
    euclidean_dist_fabkb_U1->din0(grp_fu_75_p0);
    euclidean_dist_fabkb_U1->din1(grp_fu_75_p1);
    euclidean_dist_fabkb_U1->opcode(grp_fu_75_opcode);
    euclidean_dist_fabkb_U1->ce(ap_var_for_const0);
    euclidean_dist_fabkb_U1->dout(grp_fu_75_p2);
    euclidean_dist_fmcud_U2 = new euclidean_dist_fmcud<1,4,32,32,32>("euclidean_dist_fmcud_U2");
    euclidean_dist_fmcud_U2->clk(ap_clk);
    euclidean_dist_fmcud_U2->reset(ap_rst);
    euclidean_dist_fmcud_U2->din0(d_reg_136);
    euclidean_dist_fmcud_U2->din1(d_reg_136);
    euclidean_dist_fmcud_U2->ce(ap_var_for_const0);
    euclidean_dist_fmcud_U2->dout(grp_fu_80_p2);
    euclidean_dist_fsdEe_U3 = new euclidean_dist_fsdEe<1,12,32,32,32>("euclidean_dist_fsdEe_U3");
    euclidean_dist_fsdEe_U3->clk(ap_clk);
    euclidean_dist_fsdEe_U3->reset(ap_rst);
    euclidean_dist_fsdEe_U3->din0(ap_var_for_const1);
    euclidean_dist_fsdEe_U3->din1(dist_0_reg_52);
    euclidean_dist_fsdEe_U3->ce(ap_var_for_const0);
    euclidean_dist_fsdEe_U3->dout(grp_fu_84_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln9_fu_102_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_fu_84_p2 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln9_fu_102_p1 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_75_opcode);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_75_p0);
    sensitive << ( a_load_reg_126 );
    sensitive << ( dist_0_reg_52 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_75_p1);
    sensitive << ( b_load_reg_131 );
    sensitive << ( tmp_1_reg_142 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_i_fu_96_p2);
    sensitive << ( i_0_reg_64 );

    SC_METHOD(thread_icmp_ln8_fu_90_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_64 );

    SC_METHOD(thread_zext_ln9_fu_102_p1);
    sensitive << ( i_0_reg_64 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_90_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "0000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "euclidean_dist_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_96_p2, "i_fu_96_p2");
    sc_trace(mVcdFile, i_reg_111, "i_reg_111");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln8_fu_90_p2, "icmp_ln8_fu_90_p2");
    sc_trace(mVcdFile, a_load_reg_126, "a_load_reg_126");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, b_load_reg_131, "b_load_reg_131");
    sc_trace(mVcdFile, grp_fu_75_p2, "grp_fu_75_p2");
    sc_trace(mVcdFile, d_reg_136, "d_reg_136");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_80_p2, "grp_fu_80_p2");
    sc_trace(mVcdFile, tmp_1_reg_142, "tmp_1_reg_142");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, dist_0_reg_52, "dist_0_reg_52");
    sc_trace(mVcdFile, i_0_reg_64, "i_0_reg_64");
    sc_trace(mVcdFile, zext_ln9_fu_102_p1, "zext_ln9_fu_102_p1");
    sc_trace(mVcdFile, grp_fu_75_p0, "grp_fu_75_p0");
    sc_trace(mVcdFile, grp_fu_75_p1, "grp_fu_75_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_75_opcode, "grp_fu_75_opcode");
    sc_trace(mVcdFile, grp_fu_84_p2, "grp_fu_84_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("euclidean_dist.hdltvin.dat");
    mHdltvoutHandle.open("euclidean_dist.hdltvout.dat");
}

euclidean_dist::~euclidean_dist() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete euclidean_dist_fabkb_U1;
    delete euclidean_dist_fmcud_U2;
    delete euclidean_dist_fsdEe_U3;
}

void euclidean_dist::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void euclidean_dist::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void euclidean_dist::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        dist_0_reg_52 = grp_fu_75_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        dist_0_reg_52 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        i_0_reg_64 = i_reg_111.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_64 = ap_const_lv11_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_load_reg_126 = a_q0.read();
        b_load_reg_131 = b_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        d_reg_136 = grp_fu_75_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_111 = i_fu_96_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        tmp_1_reg_142 = grp_fu_80_p2.read();
    }
}

void euclidean_dist::thread_a_address0() {
    a_address0 =  (sc_lv<10>) (zext_ln9_fu_102_p1.read());
}

void euclidean_dist::thread_a_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void euclidean_dist::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void euclidean_dist::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void euclidean_dist::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void euclidean_dist::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void euclidean_dist::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void euclidean_dist::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void euclidean_dist::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void euclidean_dist::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void euclidean_dist::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void euclidean_dist::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void euclidean_dist::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void euclidean_dist::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void euclidean_dist::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void euclidean_dist::thread_ap_return() {
    ap_return = grp_fu_84_p2.read();
}

void euclidean_dist::thread_b_address0() {
    b_address0 =  (sc_lv<10>) (zext_ln9_fu_102_p1.read());
}

void euclidean_dist::thread_b_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void euclidean_dist::thread_grp_fu_75_opcode() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_75_opcode = ap_const_lv2_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_75_opcode = ap_const_lv2_0;
    } else {
        grp_fu_75_opcode = "XX";
    }
}

void euclidean_dist::thread_grp_fu_75_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_75_p0 = dist_0_reg_52.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_75_p0 = a_load_reg_126.read();
    } else {
        grp_fu_75_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void euclidean_dist::thread_grp_fu_75_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_75_p1 = tmp_1_reg_142.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_75_p1 = b_load_reg_131.read();
    } else {
        grp_fu_75_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void euclidean_dist::thread_i_fu_96_p2() {
    i_fu_96_p2 = (!i_0_reg_64.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_0_reg_64.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void euclidean_dist::thread_icmp_ln8_fu_90_p2() {
    icmp_ln8_fu_90_p2 = (!i_0_reg_64.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_64.read() == ap_const_lv11_400);
}

void euclidean_dist::thread_zext_ln9_fu_102_p1() {
    zext_ln9_fu_102_p1 = esl_zext<64,11>(i_0_reg_64.read());
}

void euclidean_dist::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln8_fu_90_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<28>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void euclidean_dist::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q0\" :  \"" << a_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

