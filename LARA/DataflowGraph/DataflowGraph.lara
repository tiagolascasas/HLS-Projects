import weaver.WeaverJps;
import clava.ClavaJoinPoints;
import clava.Clava;
import lara.code.Logger;
import PrintAST;

/**
	Source code assumptions:
	- Arrays have predetermined size
	- No pointers
	- Variables declared/initialized one at a time (e.g. no "int x, y = 0")
**/
aspectdef DataflowGraph
	input
		funName
	end
	//Get function root
	var root;
	var filename = Clava.getProgram().files[0].name;
	var basename = filename.split(".");
	var filename = funName + ".dot";
	var logger = new Logger(undefined, filename);
	//replace by filter, not sure of the syntax
	for (var elem of WeaverJps.search("function").chain()){
		if (elem["function"].name == funName)
			root = elem["function"];
	}	
	//call PrintAST(root);

	//Get scope and params
	var scope;
	var params = [];
	for (var i = 0; i < root.children.length; i++) {
		if (root.children[i].joinPointType == "scope")
			scope = root.children[i];
		if (root.children[i].joinPointType == "param")
			params.push(root.children[i]);
	}

	//Get local variables
	var vars = getVars(scope);
	vars = vars.filter(isNotLoopVar);

	//Begin graph: declare variables for counting
	var firstOp = scope.children[0];
	logger.text("Digraph G {\\n").log(firstOp, true);
	firstOp.insertBefore(ClavaJoinPoints.stmtLiteral("//Begin: counter variables"));
	for (var i = 0; i < params.length; i++)
		firstOp.insertBefore(declareVariable(params[i]));
	for (var i = 0; i < vars.length; i++)
		firstOp.insertBefore(declareVariable(vars[i]));
	firstOp.insertBefore(declareCounter("n_const"));	//Counts constants
	firstOp.insertBefore(declareCounter("n_op"));	//Counts operations (e.g. +, -)
	firstOp.insertBefore(declareCounter("n_out"));		
	firstOp.insertBefore(declareCounter("n_edge"));	//Counts edges
	firstOp.insertBefore(declareCounter("n_temp"));	//Counts temporary vars
	firstOp.insertBefore(ClavaJoinPoints.stmtLiteral("//End: counter variables"));
	//Get index of first operation
	var startIdx = -1;
	for (var i = 0; i < scope.children.length; i++) {
		if (scope.children[i].astId == firstOp.astId)
			startIdx = i;
	}
	//Get scope-level nodes
	var nodes = [];
	for (var i = startIdx; i < scope.children.length; i++) {
		nodes.push(scope.children[i]);
	}
	//Insert prints for variable declarations
	for (var i = 0; i < nodes.length; i++) {
		createNodes(nodes[i], logger);
	}
	call PrintAST(root);
	//Connect nodes and create operations
	for (var i = 0; i < nodes.length; i++) {
		connectNodes(nodes[i], logger);
	}
	//End graph
	var ret = scope.children[scope.children.length-2];
	logger.text("}\\n").log(ret);

	var outp = '';
	for (var property in offsets) {
	  outp += property + ': ' + offsets[property]+'; ';
	}
	println(outp);
end

function declareCounter(name) {
	var node = ClavaJoinPoints.stmtLiteral("int " + name + " = 0;");
	offsets[name] = 0;
	return node;
}

function getVars(root) {
	var vars = [];
	for (var i = 0; i < root.children.length; i++) {
		if (root.children[i].joinPointType == "vardecl")
			vars.push(root.children[i]);
		else
			vars = vars.concat(getVars(root.children[i]));
	}
	return vars;
}

function isNotLoopVar(node) {
	//A smarter way would be to actually look through the loops
	//But let's assume we just want to filter out typical counter names for now
	var names = ["i", "j", "k"];
	return !names.includes(node.name);
}

function loopChecker(node) {
	while (node.joinPointType != "program") {
		if (node.joinPointType == "scope") {
			node.setUserField("inLoop", false);
			return false;
		}
		if (node.joinPointType == "loop"){
			node.setUserField("inLoop", true);
			return true;
		}
		node = node.parent;
	}
	node.setUserField("inLoop", false);
	return false;
}

function declareVariable(decl) {
	var canonName = "";
	var tokens = decl.code.split(" ");
	for (var i = 0; i < tokens.length; i++) {
		if (tokens[i].indexOf(decl.name) != -1) {
			tokens[i] = "n_" + tokens[i];
			canonName = tokens[i];
		}
		if (tokens[i] == "const")
			tokens[i] = "";
	}
	tokens = tokens.join(" ");
	if (tokens.indexOf("=") == -1) {
		if (tokens.indexOf("[") != -1)
			tokens += " = {0};";
		else
			tokens += " = 0;";
	}
	if (tokens[tokens.length - 1] != ";")
		tokens += ";";
	if (canonName.indexOf('[') != -1)
		canonName = canonName.substr(0, canonName.indexOf('['));
	offsets[canonName] = 0;
	return ClavaJoinPoints.stmtLiteral(tokens);
}

function incrementVar(node, variable) {
	node.insertBefore(ClavaJoinPoints.stmtLiteral(variable + "++;"));
	offsets[variable]++;
	return offsets[variable]/* - 1*/;
}

function incrementArray(node, array, idx) {
	s = array + "[" + idx + "]";
	node.insertBefore(ClavaJoinPoints.stmtLiteral(s + "++;"));
	offsets[array]++;
	return [s, offsets[array]/* - 1*/];
}

//Create nodes
function createNodes(node, logger) {
	var nodes = [];
	if (node.numChildren > 0)
		nodes = node.children.slice();
	if (!loopChecker(node)) {
		if (node.joinPointType == "expression") {
			addConstant(node, logger);
		}
		if (node.joinPointType == "vardecl") {
			addVar(node, logger);
		}
		if (node.joinPointType == "binaryOp" || node.joinPointType == "unaryOp") {
			if (node.parent.parent.type != "loop")
				addOperation(node, logger);
		}
		if (node.joinPointType == "arrayAccess") {
			addArrayAccess(node, logger);
		}
		if (node.joinPointType == "varref") {
			addVarref(node, logger);
		}
	}
	for (var i = 0; i < nodes.length; i++)
		createNodes(nodes[i], logger);
}

//Functions to add nodes
function addConstant(node, logger) {
	//expression is a constant
	var o = incrementVar(node, "n_const");
	logger.text("const")
		.int(varToPrint("n_const"))
		.text(" [label=\\\"" + node.code + "\\\", att1=const];\\n")
		.log(node, true);
	node.setUserField("label", {"name": "const", "var": "n_const", "offset": o}); 
	//TODO: other cases, if justified
}

function addVar(node, logger) {
	if (!isNotLoopVar(node))
		return;
	var o = incrementVar(node, "n_" + node.name);
	logger.text(node.name)
		.int(varToPrint("n_" + node.name))
		.text(" [label=\\\"" + node.name + "\\\", att1=var];\\n")
		.log(node, true);
	node.setUserField("label", {"name": node.name, "var": "n_" + node.name, "offset": o}); 
}

function addOperation(node, logger) {
	var o = incrementVar(node, "n_op");
	println("offset in OP = " + o);
	logger.text("op")
		.int(varToPrint("n_op"))
		.text(" [label=\\\"" + convertOp(node.kind) + "\\\", att1=\\\"op\\\"]\\n")
		.log(node, true);
	node.setUserField("label", {"name": "op", "var": "n_op", "offset": o});
	//Also generate node for temporary result if it is part of a larger operation
	if (node.parent.joinPointType == "unaryOp" || node.parent.joinPointType == "binaryOp") {
		o = incrementVar(node, "n_temp");
		logger.text("temp_l" + node.line + "_")
			.int(varToPrint("n_temp"))
			.text(" [label=\\\"temp_l" + node.line + "_")
			.int(varToPrint("n_temp"))
			.text("\\\"]\\n")
			.log(node, true);
		node.setUserField("alt", {"name": "temp_l" + node.line + "_", "var": "n_temp", "offset": o});
	}
}

function addArrayAccess(node, logger) {
	var res = incrementArray(node, "n_" + node.children[0].code, node.children[1].code);
	var n = res[0];
	var o = res[1];
	logger.text( node.children[0].code + "_arr")
		.int(varToPrint(node.children[1].code))
		.text("_")
		.int(varToPrint(n))
		.text(" [label=\\\"" + node.children[0].code + "[")
		.int(varToPrint(node.children[1].code))
		.text("]\\\"]\\n")
		.log(node, true);
	node.setUserField("label", {"name": node.children[0].code + "_arr", "var1": node.children[1].code, "var2": n, "offset": o});
}

function addVarref(node, logger) {
	//TODO, not relevant for current example
	//Same as array access, but do not perform if parent is array access
	if (isNotLoopVar(node)) {
		if (node.parent.joinPointType != "binaryOp" && node.parent.joinPointType != "unaryOp")
			return;
		incrementVar(node, "n_" + node.name);
		logger.text(node.name)
			.int(varToPrint("n_" + node.name))
			.text(" [label=\\\"" + node.name + "\\\"]\\n")
			.log(node, true);
		node.setUserField("label", {"name": node.name, "var": "n_" + node.name, "offset": 0});
	}
}

function convertOp(op) {
	switch (op) {
		case "mul": return "*";
		case "add_assign": return "+";
		case "shr" : return ">>";
		default: return op;
	}
}

//Create edges (connect the nodes)
function connectNodes(node, logger) {
	var nodes = [];
	if (node.numChildren > 0)
		nodes = node.children.slice();
	if (!node.userField("inLoop"))
		connectNode(node, logger);
	for (var i = 0; i < nodes.length; i++)
		connectNodes(nodes[i], logger);
}

//Functions to add edges
function addEdge(node, logger, sourceNode, destNode, alt, offset) {
	var source = sourceNode.userField("label");
	var dest = destNode.userField("label");
	if (offset == undefined)
		offset = 0;
	if (alt) {
		source = sourceNode.userField("alt");
	}
	if (sourceNode == destNode) {
		source = sourceNode.userField("label");
		dest = sourceNode.userField("alt");
	}
	if (source == undefined || dest == undefined) {
		//println("Cannot add edge");
		return;
	}
	incrementVar(node, "n_edge");
	
	//Source
	logger.text(source.name);
	if (source.hasOwnProperty("var")) {
		if (source.var != "none") {
			logger.int(varToPrint(source.var, source.offset, dest.offset));
		}	
	}
	else {
		logger.int(varToPrint(source.var1))
			.text("_")
			.int(varToPrint(source.var2));
	}
	//Destination
	logger.text(" -> " + dest.name);
	if (dest.hasOwnProperty("var")) {
		if (dest.var != "none")
			logger.int(varToPrint(dest.var, dest.offset + offset));
	}
	else {
		logger.int(varToPrint(dest.var1, dest.offset + offset))
			.text("_")
			.int(varToPrint(dest.var2, dest.offset + offset));
	}
	//Label
	logger.text(" [label=\\\"")
		.int(varToPrint("n_edge"))
		.text("\\\", ord=\\\"")
		.int(varToPrint("n_edge"))
		.text("\\\"]\\n")
		.log(node, true);
}

function connectNode(node, logger) {
	//if (node.numChildren == 0)
	//	return;
	var children = [];
	if (node.numChildren > 0)
		children = node.children.slice();

	if (node.joinPointType == "vardecl") {
		if (node.numChildren > 0)
			addEdge(node, logger, node.firstChild, node);
	}
	if (node.joinPointType == "unaryOp") {

	}
	if (node.joinPointType == "binaryOp") {
		for (var i = 0; i < children.length; i++) {
			if (node.children[i].joinPointType == "binaryOp") {
				addEdge(node, logger, children[i], node, true);
				addEdge(node, logger, children[i], children[i], true);
			}
			else
				addEdge(node, logger, children[i], node);
		}
	}
	if (node.joinPointType == "varref")  {
		if (node.parent.joinPointType == "binaryOp") {
			addEdge(node, logger, node.parent, node, false, 1);
		}
	}
}

//Functions to manage offsets of counter variables
offsets = {};

function varToPrint(name, offset) {
	if (offset == undefined)
		return ClavaJoinPoints.varRef(name, ClavaJoinPoints.builtinType("int"));
	else {
		if (offset != NaN)
			return ClavaJoinPoints.stmtLiteral(name + "-(" + invOffset(name, offset) + ")");
		else
			return ClavaJoinPoints.varRef(name, ClavaJoinPoints.builtinType("int"));
	}
}

function invOffset(variable, offset) {
	return offsets[variable] - offset;
}