import weaver.WeaverJps;
import clava.ClavaJoinPoints;
import clava.Clava;
import lara.code.Logger;
import PrintAST;

/**
	Source code assumptions:
	- Arrays have predetermined size
	- No pointers
	- Variables declared/initialized one at a time (e.g. no "int x, y = 0")
**/
aspectdef DataflowGraph
	input
		funName
	end

	//Get function root
	var root;
	var filename = Clava.getProgram.files[0];
	var basename = filename.split(".");
	filename = basename[0] + ".dot";
	var logger = new Logger(undefined, filename);
	//replace by filter, not sure of the syntax
	for (var elem of WeaverJps.search("function").chain()){
		if (elem["function"].name == funName)
			root = elem["function"];
	}	
	call PrintAST(root);

	//Get scope and params
	var scope;
	var params = [];
	for (var i = 0; i < root.children.length; i++) {
		if (root.children[i].joinpointType == "scope")
			scope = root.children[i];
		if (root.children[i].joinpointType == "param")
			params.push(root.children[i]);
	}

	//Get local variables
	var vars = getVars(scope);
	vars = vars.filter(loopVars);

	//Begin graph: declare variables for counting
	var firstOp = scope.children[0];
	logger.text("Digraph G {\\n").log(firstOp, true);
	firstOp.insertBefore(ClavaJoinPoints.stmtLiteral("//Begin: counter variables"));
	for (var i = 0; i < params.length; i++)
		firstOp.insertBefore(declareVariable(params[i]));
	for (var i = 0; i < vars.length; i++)
		firstOp.insertBefore(declareVariable(vars[i]));
	firstOp.insertBefore(ClavaJoinPoints.stmtLiteral("int n_op = 0;"));
	firstOp.insertBefore(ClavaJoinPoints.stmtLiteral("int n_out = 0;"));
	firstOp.insertBefore(ClavaJoinPoints.stmtLiteral("int ne = 0;"));
	firstOp.insertBefore(ClavaJoinPoints.stmtLiteral("//End: counter variables"));
	
	//Traverse the AST
	//...

	//End graph
	var ret = scope.children[scope.children.length-2];
	logger.text("}\\n").log(ret, true);

	//Exchange last two children due to logger bug
	scope.children[scope.children.length-2] = scope.children[scope.children.length-1];
	scope.children[scope.children.length-1] = ret;
end

function getVars(root) {
	var vars = [];
	for (var i = 0; i < root.children.length; i++) {
		if (root.children[i].joinpointType == "vardecl")
			vars.push(root.children[i]);
		else
			vars = vars.concat(getVars(root.children[i]));
	}
	return vars;
}

function loopVars(varName) {
	//A smarter way would be to actually look through the loops
	//But let's assume we just want to filter out 'i' for now
	return varName.name != "i";
}

function declareVariable(decl) {
	var tokens = decl.code.split(" ");
	for (var i = 0; i < tokens.length; i++) {
		if (tokens[i].indexOf(decl.name) != -1)
			tokens[i] = "n_" + tokens[i];
	}
	tokens = tokens.join(" ");
	if (tokens.indexOf("=") == -1) {
		if (tokens.indexOf("[") != -1)
			tokens += " = {0};";
		else
			tokens += " = 0;";
	}
	if (tokens[tokens.length - 1] != ";")
		tokens += ";";
	return ClavaJoinPoints.stmtLiteral(tokens);
}