// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="euclidean_dist,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.129000,HLS_SYN_LAT=16396,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=963,HLS_SYN_LUT=1548,HLS_VERSION=2019_1}" *)

module euclidean_dist (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [9:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] i_fu_96_p2;
reg   [10:0] i_reg_111;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln8_fu_90_p2;
reg   [31:0] a_load_reg_126;
wire    ap_CS_fsm_state3;
reg   [31:0] b_load_reg_131;
wire   [31:0] grp_fu_75_p2;
reg   [31:0] d_reg_136;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_80_p2;
reg   [31:0] tmp_1_reg_142;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
reg   [31:0] dist_0_reg_52;
reg   [10:0] i_0_reg_64;
wire   [63:0] zext_ln9_fu_102_p1;
reg   [31:0] grp_fu_75_p0;
reg   [31:0] grp_fu_75_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state9;
reg   [1:0] grp_fu_75_opcode;
wire   [31:0] grp_fu_84_p2;
wire    ap_CS_fsm_state28;
reg   [27:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
end

euclidean_dist_fabkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
euclidean_dist_fabkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_75_p0),
    .din1(grp_fu_75_p1),
    .opcode(grp_fu_75_opcode),
    .ce(1'b1),
    .dout(grp_fu_75_p2)
);

euclidean_dist_fmcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
euclidean_dist_fmcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d_reg_136),
    .din1(d_reg_136),
    .ce(1'b1),
    .dout(grp_fu_80_p2)
);

euclidean_dist_fsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
euclidean_dist_fsdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dist_0_reg_52),
    .ce(1'b1),
    .dout(grp_fu_84_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        dist_0_reg_52 <= grp_fu_75_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dist_0_reg_52 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_0_reg_64 <= i_reg_111;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_64 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_load_reg_126 <= a_q0;
        b_load_reg_131 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        d_reg_136 <= grp_fu_75_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_111 <= i_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_1_reg_142 <= grp_fu_80_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_75_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_75_opcode = 2'd0;
    end else begin
        grp_fu_75_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_75_p0 = dist_0_reg_52;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_75_p0 = a_load_reg_126;
    end else begin
        grp_fu_75_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_75_p1 = tmp_1_reg_142;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_75_p1 = b_load_reg_131;
    end else begin
        grp_fu_75_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln9_fu_102_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = grp_fu_84_p2;

assign b_address0 = zext_ln9_fu_102_p1;

assign i_fu_96_p2 = (i_0_reg_64 + 11'd1);

assign icmp_ln8_fu_90_p2 = ((i_0_reg_64 == 11'd1024) ? 1'b1 : 1'b0);

assign zext_ln9_fu_102_p1 = i_0_reg_64;

endmodule //euclidean_dist
