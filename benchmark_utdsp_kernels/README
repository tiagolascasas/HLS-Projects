File last updated: Feb 12, 1997.


UTDSP Benchmark Suite
=====================

This directory contains the UTDSP Benchmark suite.  The directory structure
is as follows:

				test_suite
                           /------------------\
		applications			kernels
             /----------\                    /----------\
	adpcm		...		fir               ...
      /-----\----\                     /--------------\
input.dsp   ptrs    arrays ...	    32_1              256_64
	     /         |              |-----\-------\
	 adpcm.c    adpcm.c       input.dsp  ptrs  arrays
                                              |       |
                                       fir_32_1.c  fir_32_1.c

In each benchmark directory (e.g. adpcm), an input file (input.dsp) and a
directory for each coding style is present.  Since the source files written
with different coding styles are functionally equivalent, only one input file
is present and it is kept in the application's root directory.  The possible
coding styles are ptrs (using only pointer notation), ptrs_SWP (using pointer
notation with software pipelining), arrays (using array notation) and
arrays_SWP (array notation with software pipelining).  Not all applications
are coded using all coding styles.  For some applications, such as the G721
applications, there is a further level of subdirectories between the
root application directory and the coding styles directory to organize the
different components of the application.  

Each kernel (fir, fft, etc.) has two versions.  For example, the fir filter
kernel is written for both a 32-tap filter processing one sample, and a
256-tap filter processing 64 samples.  Under each kernel, then, there is an
additional directory level for each version.  In the case of fir, there are
two subdirectories under the fir directory called 32_1 and  256_64 (for each of
the versions described above).  The directory structure underneath each of these
subdirectories is identical to that of the applications described in the above
paragraph.

Various benchmarks (both kernels and applications) require special flags so
that correct code is generated.  For instance, the adpcm application requires
the use of modulo addressing to execute properly.  This is signalled by the
presence of a file called "OPTIONS" in the test_suite/applications/adpcm
directory, containing the flag "-m".  This file describes special options that
need to be applied to all benchmarks in directories lower in the hierarchy.
For instance, both lmsfir kernels also require modulo addressing and so the
OPTIONS file (containing the "-m" flag) appears in the
test_suite/kernels/lmsfir directory.  The "-m" flag is the only relevant flag
to users who aren't using the UTDSP system.  Other flags are present, but are
used by our simulator and do not indicate special features of the benchmarks.

A special note regarding modulo addressing:  To allow a general-purpose
compiler to mimic the action of modulo addressing, we have modified the source
code by adding a macro called "GCCmod".  If this macro is defined while the
source code is compiled with, say, the gcc compiler, statements are added to
the code that will explicitly implement wraparound indexing of arrays (modulo
addressing).

The IO.c file contain the code that implements the input_dsp and output_dsp
functions used by the benchmarks to read input from the input.dsp file and
write output to the output.dsp file.  Our simulator requires the use of these
functions.  To compile for another system, the IO.c module must be linked into
the executable.  The traps.h file is included by many of the benchmarks.
The IO.c and traps.h files can be found in the test_suite directory.

Currently, the G722 and jpeg benchmarks are not functional.

If you have any problems with this distribution, please contact Mark Stoodley
(stoodla@eecg.toronto.edu) or Corinna Lee (corinna@eecg.toronto.edu).
